from flask import Flask, render_template, request, jsonify, redirect, url_for, flash
from flask_socketio import SocketIO, emit
from flask_login import LoginManager, login_user, logout_user, login_required, current_user
import openai
import os
import emoji
from dotenv import load_dotenv
from models import db, User, Message, ImageGeneration, Payment, Subscription, PricingPlan
import base64
from PIL import Image
from io import BytesIO
import json
import logging
import stripe

# 配置日志
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'your-secret-key')
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///chat.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# 配置允许的源
allowed_origins = [
    'http://localhost:8080',
    'http://127.0.0.1:8080',
    'http://localhost:5001',
    'http://127.0.0.1:5001',
    '*'  # 允许所有来源，仅用于开发环境
]

# Stripe配置
stripe.api_key = os.getenv('STRIPE_SECRET_KEY')
STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')
app.config['STRIPE_WEBHOOK_SECRET'] = os.getenv('STRIPE_WEBHOOK_SECRET')

# AdSense配置
app.config['ADSENSE_PUBLISHER_ID'] = os.getenv('ADSENSE_PUBLISHER_ID')
app.config['ADSENSE_TOP_AD_SLOT'] = os.getenv('ADSENSE_TOP_AD_SLOT')
app.config['ADSENSE_BOTTOM_AD_SLOT'] = os.getenv('ADSENSE_BOTTOM_AD_SLOT')
app.config['ADSENSE_SIDEBAR_AD_SLOT'] = os.getenv('ADSENSE_SIDEBAR_AD_SLOT')

# 初始化扩展
socketio = SocketIO(app, cors_allowed_origins=allowed_origins, async_mode='eventlet')
db.init_app(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# 设置OpenAI API密钥
openai.api_key = os.getenv('OPENAI_API_KEY')

if not openai.api_key:
    logger.error("OpenAI API key not found! Please set OPENAI_API_KEY in .env file")

@app.context_processor
def inject_adsense():
    return {
        'adsense_publisher_id': app.config['ADSENSE_PUBLISHER_ID'],
        'adsense_top_ad_slot': app.config['ADSENSE_TOP_AD_SLOT'],
        'adsense_bottom_ad_slot': app.config['ADSENSE_BOTTOM_AD_SLOT'],
        'adsense_sidebar_ad_slot': app.config['ADSENSE_SIDEBAR_AD_SLOT']
    }

@login_manager.user_loader
def load_user(user_id):
    try:
        return User.query.get(int(user_id))
    except Exception as e:
        logger.error(f"Error loading user: {e}")
        return None

@app.route('/')
@login_required
def home():
    try:
        return render_template('index.html')
    except Exception as e:
        logger.error(f"Error rendering home page: {e}")
        return "An error occurred", 500

@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('home'))
        
    if request.method == 'POST':
        try:
            username = request.form.get('username')
            password = request.form.get('password')
            
            if not username or not password:
                flash('Username and password are required')
                return render_template('login.html')
                
            user = User.query.filter_by(username=username).first()
            if user and user.check_password(password):
                login_user(user)
                return redirect(url_for('home'))
            flash('Invalid username or password')
        except Exception as e:
            logger.error(f"Login error: {e}")
            flash('An error occurred during login')
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('home'))
        
    if request.method == 'POST':
        try:
            username = request.form.get('username')
            password = request.form.get('password')
            email = request.form.get('email')
            
            if not username or not password or not email:
                flash('All fields are required')
                return render_template('register.html')
            
            if User.query.filter_by(username=username).first():
                flash('Username already exists')
                return render_template('register.html')
                
            if User.query.filter_by(email=email).first():
                flash('Email already registered')
                return render_template('register.html')
            
            user = User(username=username, email=email)
            user.set_password(password)
            db.session.add(user)
            db.session.commit()
            
            login_user(user)
            return redirect(url_for('home'))
        except Exception as e:
            logger.error(f"Registration error: {e}")
            db.session.rollback()
            flash('An error occurred during registration')
    return render_template('register.html')

@app.route('/logout')
@login_required
def logout():
    try:
        logout_user()
        return redirect(url_for('login'))
    except Exception as e:
        logger.error(f"Logout error: {e}")
        return redirect(url_for('home'))

@socketio.on('send_message')
@login_required
def handle_message(data):
    if not current_user.is_authenticated:
        emit('error', {'message': 'Authentication required'})
        return

    try:
        message = data['message']
        message_type = data.get('type', 'text')
        
        # 保存用户消息
        user_message = Message(
            content=message,
            user_id=current_user.id,
            is_ai=False
        )
        db.session.add(user_message)
        db.session.commit()
        
        try:
            if message_type == 'image':
                # 调用DALL-E API生成图像
                response = openai.Image.create(
                    prompt=message,
                    n=1,
                    size="512x512"
                )
                image_url = response['data'][0]['url']
                
                # 保存图像生成记录
                image_gen = ImageGeneration(
                    prompt=message,
                    image_url=image_url,
                    user_id=current_user.id
                )
                db.session.add(image_gen)
                
                # 发送响应
                emit('receive_message', {
                    'message': f"I've generated an image based on your prompt: {message}",
                    'image_url': image_url,
                    'sender': 'ai'
                })
            else:
                # 添加表情符号支持
                message = emoji.emojize(message, use_aliases=True)
                
                # 调用OpenAI API
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "You are a friendly and helpful AI assistant."},
                        {"role": "user", "content": message}
                    ]
                )
                
                ai_response = response.choices[0].message.content
                
                # 保存AI响应
                ai_message = Message(
                    content=ai_response,
                    user_id=current_user.id,
                    is_ai=True
                )
                db.session.add(ai_message)
                
                # 发送响应
                emit('receive_message', {
                    'message': ai_response,
                    'sender': 'ai'
                })
            
            db.session.commit()
            
        except Exception as e:
            emit('receive_message', {
                'message': f"Sorry, I encountered an error: {str(e)}",
                'sender': 'ai'
            })
    except Exception as e:
        logger.error(f"Message handling error: {e}")
        db.session.rollback()
        emit('error', {'message': 'An error occurred while processing your message'})

@app.route('/chat_history')
@login_required
def chat_history():
    try:
        messages = Message.query.filter_by(user_id=current_user.id).order_by(Message.timestamp.desc()).all()
        return render_template('chat_history.html', messages=messages)
    except Exception as e:
        logger.error(f"Chat history error: {e}")
        flash('Error loading chat history')
        return redirect(url_for('home'))

@socketio.on('generate_image')
def handle_image_generation(data):
    if not current_user.is_authenticated:
        emit('error', {'message': 'Authentication required'})
        return

    try:
        prompt = data.get('prompt')
        if not prompt:
            emit('error', {'message': 'Image prompt is required'})
            return

        response = openai.Image.create(
            prompt=prompt,
            n=1,
            size="512x512"
        )

        image_url = response['data'][0]['url']
        
        # Save image generation to database
        image_gen = ImageGeneration(
            user_id=current_user.id,
            prompt=prompt,
            image_url=image_url
        )
        db.session.add(image_gen)
        db.session.commit()

        emit('image_generated', {'image_url': image_url})
    except Exception as e:
        logger.error(f"Image generation error: {e}")
        db.session.rollback()
        emit('error', {'message': 'An error occurred while generating the image'})

@app.route('/chat')
@login_required
def chat():
    try:
        messages = Message.query.filter_by(user_id=current_user.id).order_by(Message.timestamp.desc()).limit(50).all()
        messages.reverse()  # 按时间正序显示消息
        return render_template('chat.html', messages=messages)
    except Exception as e:
        logger.error(f"Error rendering chat page: {e}")
        return "An error occurred", 500

# Stripe routes
@app.route('/pricing')
def pricing():
    plans = PricingPlan.query.all()
    return render_template('pricing.html', 
                         plans=plans,
                         stripe_public_key=STRIPE_PUBLIC_KEY)

@app.route('/create-checkout-session', methods=['POST'])
@login_required
def create_checkout_session():
    try:
        data = request.get_json()
        plan_id = data.get('plan_id')
        
        if not plan_id:
            return jsonify({'error': 'Plan ID is required'}), 400
            
        plan = PricingPlan.query.get(plan_id)
        if not plan:
            return jsonify({'error': 'Invalid plan ID'}), 400

        # Create or get Stripe customer
        if not current_user.stripe_customer_id:
            customer = stripe.Customer.create(
                email=current_user.email,
                metadata={'user_id': current_user.id}
            )
            current_user.stripe_customer_id = customer.id
            db.session.commit()
        
        # Create Stripe checkout session
        checkout_session = stripe.checkout.Session.create(
            customer=current_user.stripe_customer_id,
            payment_method_types=['card'],
            line_items=[{
                'price_data': {
                    'currency': 'usd',
                    'product_data': {
                        'name': plan.name,
                        'description': plan.description,
                    },
                    'unit_amount': int(plan.price * 100),  # Convert to cents
                    'recurring': {
                        'interval': 'month'
                    } if plan.is_subscription else None,
                },
                'quantity': 1,
            }],
            mode='subscription' if plan.is_subscription else 'payment',
            success_url=url_for('payment_success', _external=True),
            cancel_url=url_for('payment_cancel', _external=True),
            metadata={
                'plan_id': plan.id,
                'user_id': current_user.id
            }
        )
        
        return jsonify({'id': checkout_session.id})
        
    except Exception as e:
        return jsonify({'error': str(e)}), 400

@app.route('/payment-success')
@login_required
def payment_success():
    flash('Payment successful! Your credits have been added to your account.', 'success')
    return redirect(url_for('chat'))

@app.route('/payment-cancel')
@login_required
def payment_cancel():
    flash('Payment was cancelled.', 'warning')
    return redirect(url_for('pricing'))

@app.route('/stripe-webhook', methods=['POST'])
def stripe_webhook():
    payload = request.get_data()
    sig_header = request.headers.get('Stripe-Signature')

    try:
        event = stripe.Webhook.construct_event(
            payload, sig_header, app.config['STRIPE_WEBHOOK_SECRET']
        )
    except ValueError as e:
        return 'Invalid payload', 400
    except stripe.error.SignatureVerificationError as e:
        return 'Invalid signature', 400

    if event['type'] == 'checkout.session.completed':
        session = event['data']['object']
        
        user_id = session['metadata']['user_id']
        plan_id = session['metadata']['plan_id']
        
        user = User.query.get(user_id)
        plan = PricingPlan.query.get(plan_id)
        
        if not user or not plan:
            return 'Invalid user or plan', 400

        # Create payment record
        payment = Payment(
            user_id=user.id,
            amount=session['amount_total'] / 100,  # Convert from cents
            stripe_payment_id=session['payment_intent'],
            status='completed'
        )
        db.session.add(payment)
        
        # If subscription, create subscription record
        if session['mode'] == 'subscription':
            subscription = Subscription(
                user_id=user.id,
                plan_id=plan.id,
                stripe_subscription_id=session['subscription'],
                status='active'
            )
            db.session.add(subscription)
        
        # Add credits to user
        user.credits += plan.credits
        db.session.commit()

    elif event['type'] == 'customer.subscription.deleted':
        subscription_id = event['data']['object']['id']
        subscription = Subscription.query.filter_by(
            stripe_subscription_id=subscription_id
        ).first()
        
        if subscription:
            subscription.status = 'cancelled'
            db.session.commit()

    return '', 200

# 错误处理
@app.errorhandler(404)
def not_found_error(error):
    return render_template('error.html', error='Page not found'), 404

@app.errorhandler(500)
def internal_error(error):
    db.session.rollback()
    return render_template('error.html', error='Internal server error'), 500

# 创建数据库表
def init_db():
    with app.app_context():
        db.create_all()
        app.logger.info('Database tables created successfully')

if __name__ == '__main__':
    with app.app_context():
        init_db()
    port = int(os.getenv('PORT', 8080))
    socketio.run(app, host='0.0.0.0', port=port, debug=True)
